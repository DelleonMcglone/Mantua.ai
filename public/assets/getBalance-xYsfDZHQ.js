import{b1 as r,cg as s,ch as d}from"./index-tILzMOs2.js";import{readContract as e}from"./read-contract-Bch4-qur.js";import{d as m}from"./decimals-BioERYdP.js";import"./utils-DmlJ-9bG.js";import"./decodeAbiParameters-CNGCbnoP.js";const o="0x06fdde03",i=[],y=[{type:"string"}];async function u(a){return e({contract:a.contract,method:[o,i,y],params:[]})}async function l(a){return r(()=>u(a),{cacheKey:`${a.contract.chain.id}:${a.contract.address}:name`,cacheTime:Number.POSITIVE_INFINITY})}const T="0x95d89b41",h=[],N=[{type:"string"}];async function I(a){return e({contract:a.contract,method:[T,h,N],params:[]})}async function _(a){return r(()=>I(a),{cacheKey:`${a.contract.chain.id}:${a.contract.address}:symbol`,cacheTime:Number.POSITIVE_INFINITY})}async function f(a){if(s(a.contract.address))return{decimals:18,name:"Ether",symbol:"ETH",...a.contract.chain.nativeCurrency};try{const[c,t,n]=await Promise.all([l(a).catch(()=>""),_(a),m(a)]);return{decimals:n,name:c,symbol:t}}catch(c){throw new Error(`Invalid currency token: ${c}`)}}const $="0x70a08231",b=[{name:"_address",type:"address"}],E=[{type:"uint256"}];async function F(a){return e({contract:a.contract,method:[$,b,E],params:[a.address]})}async function g(a){const[c,t]=await Promise.all([F(a),f(a)]);return{...t,chainId:a.contract.chain.id,displayValue:d(c,t.decimals),tokenAddress:a.contract.address,value:c}}export{g as getBalance};
