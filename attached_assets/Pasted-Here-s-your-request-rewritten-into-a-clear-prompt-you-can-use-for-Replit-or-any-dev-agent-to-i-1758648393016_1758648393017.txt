Here’s your request rewritten into a **clear prompt** you can use for Replit (or any dev agent) to implement the Quick-Action buttons with prefilled outputs:

---

**Prompt:**

Add **Quick-Action Buttons** under the chat input.

* **“What can Mantua do?”** → When clicked, it automatically displays the following content as output:

```
Mantua.AI is the programmable liquidity layer for DeFi.
It combines AI reasoning, Uniswap v4 hooks, and onchain agents to give you natural-language control over liquidity.
Here are some example actions you can perform with Mantua:

Swap
Execute swaps with or without hooks.
- Swap ETH for USDC using a dynamic fee hook
- Swap ETH for cbBTC (standard swap, no hook)

Deploy
Spin up hooks and agents directly from chat.
- Create a new Uniswap v4 pool with a custom dynamic fee hook
- Launch an agent that can:
  • Request testnet funds via faucet
  • Manage wallet details and balance checks
  • Execute trades

Understand
Analyze contracts, pools, and hooks.
- What hooks are active in the ETH/USDC pool on Base?
- What ERC standards does contract 0x5932...627f implement?
- Show me the total liquidity in my deployed pool

Interact
Query balances and wallet info.
- How much ETH is in my wallet?
- What is the current value of my LP position in the ETH/USDC pool?

Explore
Access blockchain-level data and activity.
- What’s the current gas price on Base?
- Show the last 10 transactions for my wallet
- Get details for transaction 0xdfc4...9e04

Research
Retrieve token, protocol, and market insights.
- What’s the market price of ETH on Base?
- Compare TVL between ETH/USDC pools on Base vs Unichain
- Show me recent volume trends for cbBTC on Base
```

---

* **“Learn about Hooks”** → When clicked, it automatically displays the following content as output:

```
Hooks are custom pieces of logic that extend Uniswap v4 pools and in some cases swaps.
They let developers and traders add intelligence, protection, and new features directly into liquidity.
Here are some examples of what you can do with hooks:

Dynamic Fee Hook
Adjust fees automatically based on market conditions.
- Charge higher fees during volatility, lower fees during calm periods
Example: Swap ETH for USDC using a dynamic fee hook

TWAP (Time-Weighted Average Price) Hook
Smooth out execution with oracle-like pricing.
- Execute trades against an average price over time
Example: Swap ETH for cbBTC with a TWAP hook enabled

MEV Protection Hook
Defend liquidity providers and traders from front-running.
- Add guardrails against sandwich attacks
Example: Enable MEV protection in an ETH/USDC pool

Custom Hooks
Design and deploy your own logic.
- Add loyalty rewards or fee splits for LPs
- Create hooks that restrict trades to whitelisted addresses
- Combine multiple hooks into one pool for tailored behavior

Pool-Level Insights
Use hooks to unlock new data.
- Track LP activity directly inside pools
- View how hooks change swap execution and fee distribution
```

---

* **“Analyze Uniswap v4 contracts”** → When clicked, it automatically displays the following content as output:

```
Uniswap v4 Overview (Base)
What changed from v3 → v4: v4 introduces a singleton architecture via the PoolManager, so pools live inside one contract; and hooks let builders add programmable logic (dynamic fees, MEV protection, etc.) at the pool level. Gas usage is reduced with native “flash accounting,” and liquidity positions move to ERC-1155 (vs v3’s ERC-721). (Uniswap Docs)

Ethereum mainnet anchor (context): The canonical PoolManager on Ethereum mainnet is 0x000000000004444C5dC75cB358380D2e3DE08A90. If you’re reading v4 articles or SDK examples, they often reference this address. (Ethereum (ETH) Blockchain Explorer)

Core Uniswap v4 Components (what Mantua users will see)
- PoolManager (singleton): single entry point for swaps, mints/burns, and pool state.
- PositionManager (ERC-1155): creates/manages LP positions.
- Quoter: off-chain pricing and quote simulation.
- StateView: read-only state helpers for pools/positions.
- Universal Router: user-facing router for swaps/liquidity.
- Permit2: shared approvals/allowances used across chains. (Uniswap Docs)

Uniswap v4 — Contract Addresses on Base

Base Mainnet (Chain ID 8453)
PoolManager: 0x498581fF718922C3f8E6A244956Af099b2652B2B
PositionDescriptor: 0x25D093633990dC94bEDEeD76C8F3cdaa75F3E7D5
PositionManager: 0x7C5F5A4bbD8Fd63184577525326123b519429Bdc
Quoter: 0x0D5E0F971ed27FbfF6c2837BF31316121532048D
StateView: 0xA3C0c9B65Bad0B08107aA264b0F3DB444B867a71
Universal Router: 0x6fF5693b99212Da76ad316178A184AB56D299b43
Permit2: 0x000000000022D473030F116dDEE9F6B43aC78BA3

Base Sepolia (Testnet, Chain ID 84532)
PoolManager: 0x05E73354cFDd6745C338b50BcFDfA3Aa6fA03408
PositionManager: 0x4b2C77D209d3405F41A037eC6C77F7F5B8E2cA80
Quoter: 0x4A6513C898fE1B2D0E78D3B0E0A4a151589B1cBa
StateView: 0x571291B572eD32cE6751a2cB2486eBEE8defB9B4
Universal Router: 0x492E6456D9528771018DeB9E87ef7750EF184104
Permit2: 0x000000000022D473030F116dDEE9F6B43aC78BA3
Source: Uniswap v4 official deployments (Uniswap Docs)
```

---

Would you like me to **also format this into a TypeScript/React component** (e.g., an array of `{title, content}` objects that auto-render buttons + outputs), so you can drop it right into your Mantua frontend?
